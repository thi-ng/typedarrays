#+SETUPFILE: setup.org

* Contents                                                         :toc_4_gh:
 - [[#thingtypedarrayscore][thi.ng.typedarrays.core]]
     - [[#todo-add-arraybufferview-fns][TODO add ArrayBufferView fns]]
     - [[#templates][Templates]]
     - [[#typed-array-constructors][Typed array constructors]]
         - [[#conversion-of-cljs-sequences][Conversion of CLJS sequences]]
         - [[#create-fixed-length-buffers][Create fixed-length buffers]]
         - [[#implementations][Implementations]]
     - [[#helpers][Helpers]]
     - [[#complete-namespace-definition][Complete namespace definition]]

* thi.ng.typedarrays.core

** TODO add ArrayBufferView fns

** Templates

#+NAME: tpl-ctor
#+BEGIN_SRC emacs-lisp :var fn="" :var type=""
  (replace-regexp-in-string "{{fn}}" fn
   (replace-regexp-in-string "{{type}}" type
   "(defn {{fn}}
    \"Creates a native {{type}} of the given size or from `coll`.\"
    [size-or-coll]
    (if (or (number? size-or-coll) (typed-array? size-or-coll))
      (js/{{type}}. size-or-coll)
      (let [len (count size-or-coll)
            buf (js/{{type}}. len)]
        (loop [i len, coll size-or-coll]
          (when (pos? i)
            (aset buf i (first coll))
            (recur (dec i) (next coll))))
        buf)))"))
#+END_SRC

** Typed array constructors

*** Conversion of CLJS sequences

#+BEGIN_SRC clojure
  (prn (tarrays/float32 [1 2 3 4]))
  ;; [1, 2, 3, 4]
  (prn (tarrays/uint8 [1 -2 259 -128]))
  ;; [1, 254, 3, 128]
#+END_SRC

*** Create fixed-length buffers

#+BEGIN_SRC clojure
  (prn (tarrays/int32 4))
  ;; [0, 0, 0, 0]
#+END_SRC

*** Implementations

The array constructors are all generated from the above template:

#+BEGIN_SRC clojure :noweb-ref ctors :noweb yes
  <<tpl-ctor(fn="int8", type="Int8Array")>>

  <<tpl-ctor(fn="uint8", type="Uint8Array")>>

  <<tpl-ctor(fn="uint8-clamped", type="Uint8ClampedArray")>>

  <<tpl-ctor(fn="int16", type="Int16Array")>>

  <<tpl-ctor(fn="uint16", type="Uint16Array")>>

  <<tpl-ctor(fn="int32", type="Int32Array")>>

  <<tpl-ctor(fn="uint32", type="Uint32Array")>>

  <<tpl-ctor(fn="float32", type="Float32Array")>>

  <<tpl-ctor(fn="float64", type="Float64Array")>>
#+END_SRC

** Helpers

#+BEGIN_SRC clojure :noweb-ref helpers
  (defn typed-arrays-supported?
    "Returns true if JS runtime supports typed arrays"
    [] (not (nil? (aget js/window "ArrayBuffer"))))

  (def ^:private array-types
    {"Uint8Array"        :uint8
     "Uint8ClampedArray" :uint8-clamped
     "Uint16Array"       :uint16
     "Uint32Array"       :uint32
     "Int8Array"         :int8
     "Int16Array"        :int16
     "Int32Array"        :int32
     "Float32Array"      :float32
     "Float64Array"      :float64})

  (defn typed-array?
    "Returns truthy value if the given arg is a typed array instance"
    [x]
    (if (= "object" (goog/typeOf x))
      (if (number? (.-BYTES_PER_ELEMENT x))
        (.-buffer x))))

  (defn array-type
    [x]
    (if (array? x)
      :array
      (if (typed-array? x)
        (->> (.-constructor x)
             str
             (re-find #"((Uint|Int|Float)\d+(Clamped)?Array)")
             first
             (get array-types)))))
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/typedarrays/core.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.typedarrays.core)

  <<helpers>>

  <<ctors>>
#+END_SRC
